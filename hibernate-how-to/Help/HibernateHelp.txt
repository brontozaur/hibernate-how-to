How to use hibernate annotations
---------------------------------------

1. Primary key, auto-increment:

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "PersonJob_idPersonJob", unique = true)
	private long idPersonJob;

No setter is required.

2. Skip some bean properties from creating a database table column:

	@Transient
	public final static String DEFAULT_CURRENCY = "EUR";
	
3. Get the parent of an 1-n relationship in the child bean (e.g. get Factura object from FacturaArticol bean):

In FacturaArticol declare this:

	@ManyToOne
	@JoinColumn(name = "idFactura") //table column in factura_articole table
	private Factura factura;

4. Creates/updates but NO RESET on database schema at startup:

Use this in hibernate.cfg.xml

<property name="hibernate.hbm2ddl.auto">update</property>

5. Declares an entity bean (used for ORM):

@Entity
@Table(name = "hibernate_person")
public class Person {
.....

6. Declares a named query:

@Entity
@Table(name = "hibernate_person")
@NamedQueries({
		@NamedQuery(name = QueryMappings.GET_ALL_PERSONS, query = "from Person"), 
		@NamedQuery(name = QueryMappings.GET_PERSON_BY_ID, query = "from Person WHERE id = :personId") })
public class Person {

where QueryMappings.GET_ALL_PERSONS = some_unique_string, used to extract the query afterwards.
Pay attention that the object CLASS is used to query from the object class (e.g. Person) instead of the declared table_name (e.g. hibernate_person).

7. How to use a declared named query:

		Query q = HibernateUtil.getQuery(QueryMappings.GET_PERSON_BY_ID);
		q.setParameter("personId", 1); //personId is the :personId parameter and NOT the id value after WHERE clause. This can be any string, as long as it is referenced with the same value when the 
		// .setParameter() method is called.
		Person p = (Person) q.list().get(0);

		OR:
		
		Query q = getSessionFactory().openSession().getQuery(QueryMappings.GET_PERSON_BY_ID);
		q.setParameter("personId", 1);
		Person p = (Person) q.list().get(0);

8. Get the list of childs of a parent, in an 1-n relationship (e.g. getFacturaArticoleList() for Factura bean):

In Factura bean declare:

(Solution1)
	@OneToMany(fetch = FetchType.LAZY, targetEntity = FacturaArticole.class)
	@JoinColumn(name = "idFactura") //table column in factura_articole table
	List<FacturaArticole> articoleList;
	
	equivalent with:
	
(Solution2)	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "facturaXXX")
	List<FacturaArticole> articoleList;
	
	where <facturaXXX> is a FacturaArticol property, declared as:
	
	@ManyToOne
	@JoinColumn(name = "factura_id") //column from Factura bean
	private Factura facturaXXX;
	
	Warning: if private Factura facturaXXX; is changed to private Factura facturaYYY;, then the:
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "facturaXXX") will NOT work anymore.
	
	I think it will be more safely to rely on the column name rather than on the field name, therefore (Solution1) would be a prime candidate.

9. TODO: to declare static constants for table columns used in foreign keys, for a better understanding of the annotations.
10. Useful net resources:
http://www.sauronsoftware.it/projects/cron4j/manual.php?PHPSESSID=q8od5b8l5v99jikke9o04kpd77
http://www.laliluna.de/articles/java-persistence-hibernate/first-hibernate-example-tutorial.html
http://viralpatel.net/blogs/hibernate-one-to-many-annotation-tutorial/
http://docs.jboss.org/hibernate/orm/3.3/reference/en/html/tutorial.html
http://stackoverflow.com/questions/9954590/hibernate-error-querysyntaxexception-users-is-not-mapped-from-users
http://www.tutorialspoint.com/hibernate/hibernate_mapping_types.htm
http://stackoverflow.com/questions/1654467/springhibernate-mapping-class-without-xml
http://stackoverflow.com/questions/3746047/hibernate-how-to-delete-child-records-instead-of-setting-foreign-key-to-null
http://www.mkyong.com/hibernate/hibernate-save-image-into-database/
http://stackoverflow.com/questions/4253512/creating-16-or-32-bit-image-from-byte-array
http://www.java2s.com/Tutorial/Java/0280__SWT/CreateImagefrombytearray.htm
http://ndpsoftware.com/HibernateMappingCheatSheet.html
https://community.jboss.org/wiki/Non-transactionaldataaccessandtheauto-commitmode
https://community.jboss.org/wiki/OpenSessionInView
http://svn.constellio.com/constellio-connector-http/trunk/source/java/META-INF/persistence.xml
http://jonathanhui.com/hibernate-java-persistence-api-jpa-0
http://s3-eu-west-1.amazonaws.com/presentations2012/50_presentation.pdf
http://www.objectdb.com/java/jpa/persistence/delete
http://docs.jboss.org/ejb3/app-server/HibernateEntityManager/reference/en/html_single/index.html - automanaged context for ejb3
http://stackoverflow.com/questions/3739387/javax-persistence-persistenceexception-no-persistence-provider-for-entitymanage
http://www.objectdb.com/java/jpa/persistence/managed
http://blog.eyallupu.com/2010/06/hibernate-exception-simultaneously.html
http://www.objectdb.com/java/jpa/persistence/retrieve
http://www.jpab.org/Hibernate.html

JDO vs JPA vs DataNucleus vs Hibernate facts
1. First, there was JDO, working with RDBMS and nonRDBMS database
2. Secondly, forced by major players, Sun developped JPA, working only with RDBMS dbs.
3. Hibernate is a JPA implementation (fastest on the market)
4. DataNucleus supports fully both JPA and JDO specifications.

http://db.apache.org/jdo/jdo_v_jpa.html
http://www.javacodegeeks.com/2011/02/datanucleus-30-vs-hibernate-35.html -- hibernate is 9 times faster!!! hmmmm
http://www.jpab.org/DataNucleus/H2/server/Hibernate/H2/server.html


11. How to delete foreign key references in child tables upon delete in the parent table:

Hibernate by default sets the FK value to NULL in child tables when deleting a parent.
To change this behavior use this:

	@OneToMany(fetch = FetchType.LAZY, targetEntity = PersonRelative.class, cascade = CascadeType.ALL)
	@JoinColumn(name = BeanSQLMappings.PERSON_RELATIVE_COLUMN_PERSON_ID)
	List<PersonRelative> relatives;
	
	the cascade value instructs Hibernate to perform deletion in children tables also.
	
	It can also be done by using orphanRemoval = true in the @OneToMany annotation.

12. Using fetch = FetchType.LAZY, might create a HOLLOW object (e.g. an empty object, having set only 1 property - the primary key). When other properties are needed, they are activated
(readed) from the db and managed. Now the hollow object becomes a fully initialized object.

13. The FetchingType.LAZY greately improves performance, but there are case when hollow objects are not acceptable. (e.g. activating them one-by-one afterwards makes multiple selects, and therefore
performance decreases). This fetching type might be then changed to FetchType.EAGER, which aggresively (and fully) initializes the objects. Howver, using multiple lists in the same object,
with EAGER fetching type will lead to errors, due to some bug in Hibernate. For instance:

 - having the Person bean, with properties:
 
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "personx", fetch = FetchType.EAGER)
	List<PersonJob> jobs;

	and 
	
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "person", fetch = FetchType.EAGER)
	List<PersonRelative> relatives;
	
	leads to multiple bags exception. This can be overcome by:
	
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "personx", fetch = FetchType.EAGER)
	@Fetch(FetchMode.SUBSELECT)
	List<PersonJob> jobs;
	
	OR (using a Set instead of List - however, sets does not guarantee order - so, use it as needed)
	
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "personx", fetch = FetchType.EAGER)
	Set<PersonJob> jobs;
	
	See also http://www.objectdb.com/java/jpa/persistence/retrieve.

14. Cache L2. JPA cache usefull scenarios are:
	a. In persistence.xml, define: <property name="javax.persistence.shared.cache.mode" value="ALL"/>
	b. A smarter setting is: <property name="javax.persistence.shared.cache.mode" value="ENABLE_SELECTIVE"/> in conjuction with @Cacheable (or @Cacheable(true))
		annotation which marks the targeted entity as cacheable. DISABLE_SELECTIVE caching policy assumes by default that all items are cached, except those marked
		as disabled.
	c. Cache can be accessed and an object tested if cached as: 
	
		EntityManager em = ...;
		Cache cache = em.getEntityManagerFactory().getCache();
		String personPK = ...;
		if (cache.contains(Person.class, personPK)) {
		  // the data is cached
		} else {
		  // the data is NOT cached
		}
		
		About cache: http://docs.oracle.com/javaee/6/tutorial/doc/gkjjj.html
		Use evict(..) and evictAll(..) to remove objects from cache.

15. Hibernate dialects benchmarks:
	http://www.jpab.org/Hibernate.html